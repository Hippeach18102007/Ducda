package com.example.ASM1_DUCDATH04243_SD20202.Service;

import com.example.ASM1_DUCDATH04243_SD20202.Model.*;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.DiemRepository;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.LopHocRepository;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.StudentRepository;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private LopHocRepository lopHocRepository;
    @Autowired
    private DiemRepository diemRepository;
    @Autowired
    private EmailService emailService;

    // ... (C√°c ph∆∞∆°ng th·ª©c kh√°c c·ªßa b·∫°n gi·ªØ nguy√™n, t√¥i ch·ªâ c·∫≠p nh·∫≠t l·∫°i h√†m importStudentsFromExcel)

    /**
     * C·∫¨P NH·∫¨T: Import sinh vi√™n t·ª´ Excel v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ chi ti·∫øt.
     * @param file File Excel ƒë∆∞·ª£c upload.
     * @return M·ªôt Map ch·ª©a k·∫øt qu·∫£: s·ªë l∆∞·ª£ng th√†nh c√¥ng, th·∫•t b·∫°i, v√† danh s√°ch l·ªói.
     * @throws IOException N√©m ra khi c√≥ l·ªói ƒë·ªçc file.
     */
    public Map<String, Object> importStudentsFromExcel(MultipartFile file) throws IOException {
        Map<String, Object> result = new HashMap<>();
        List<String> errors = new ArrayList<>();
        int successCount = 0;
        int failureCount = 0;

        try (InputStream inputStream = file.getInputStream();
             Workbook workbook = new XSSFWorkbook(inputStream)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rows = sheet.iterator();

            // B·ªè qua d√≤ng header
            if (rows.hasNext()) {
                rows.next();
            }

            while (rows.hasNext()) {
                Row currentRow = rows.next();
                String studentName = getCellValueAsString(currentRow.getCell(0));
                String email = getCellValueAsString(currentRow.getCell(1));
                String sdt = getCellValueAsString(currentRow.getCell(2));
                String chuyenNganh = getCellValueAsString(currentRow.getCell(3));

                if (studentName.isEmpty() && email.isEmpty()) {
                    continue; // B·ªè qua d√≤ng tr·ªëng
                }

                // Ki·ªÉm tra d·ªØ li·ªáu c∆° b·∫£n
                if (studentName.isEmpty() || chuyenNganh.isEmpty()) {
                    errors.add("D√≤ng " + (currentRow.getRowNum() + 1) + ": T√™n sinh vi√™n v√† Chuy√™n ng√†nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                    failureCount++;
                    continue;
                }

                StudentManager newStudent = new StudentManager();
                newStudent.setStudentName(studentName);
                newStudent.setEmail(email);
                newStudent.setSdt(sdt);
                newStudent.setChuyenNganh(chuyenNganh);

                try {
                    // T√°i s·ª≠ d·ª•ng logic nghi·ªáp v·ª• ƒë√£ c√≥ ƒë·ªÉ t·ª± ƒë·ªông x·∫øp l·ªõp v√† ki·ªÉm tra
                    this.saveNewStudent(newStudent);
                    successCount++;
                } catch (IllegalStateException e) {
                    // B·∫Øt l·ªói t·ª´ saveNewStudent (vd: l·ªõp ƒë·∫ßy, chuy√™n ng√†nh kh√¥ng kh·ªõp)
                    errors.add("Sinh vi√™n '" + newStudent.getStudentName() + "': " + e.getMessage());
                    failureCount++;
                }
            }
        }

        result.put("successCount", successCount);
        result.put("failureCount", failureCount);
        result.put("errors", errors);

        return result;
    }

    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue().trim();
            case NUMERIC -> String.format("%.0f", cell.getNumericCellValue());
            default -> "";
        };
    }

    // ----------------------------------------------------------------------------------
    // C√ÅC H√ÄM KH√ÅC C·ª¶A B·∫†N (GI·ªÆ NGUY√äN)
    // T√¥i copy l·∫°i c√°c h√†m kh√°c c·ªßa b·∫°n ·ªü ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o file ƒë·∫ßy ƒë·ªß
    // ----------------------------------------------------------------------------------

    private void updateClassStudentCount(Integer classId) {
        ClassManager classManager = lopHocRepository.findById(classId);
        if (classManager != null) {
            long currentCount = studentRepository.countStudentsByClassId(classId);
            classManager.setSoLuongSinhVienHienTai((int) currentCount);
            lopHocRepository.update(classManager);
        }
    }

    public List<StudentDetailDTO> getAllStudentDetails() {
        Map<Integer, ClassManager> updatedClasses = lopHocRepository.findAll().stream()
                .collect(Collectors.toMap(ClassManager::getIdClass, cls -> {
                    updateClassStudentCount(cls.getIdClass());
                    return lopHocRepository.findById(cls.getIdClass());
                }));

        return studentRepository.findAll().stream()
                .map(student -> {
                    ClassManager classInfo = updatedClasses.get(student.getIdClass());
                    List<DiemManager> scores = diemRepository.findByStudentId(student.getId());
                    return new StudentDetailDTO(student, classInfo, scores);
                }).collect(Collectors.toList());
    }

    public StudentDetailDTO getStudentDetailsById(Integer id) {
        StudentManager student = studentRepository.findById(id);
        if (student == null) return null;

        ClassManager classInfo = null;
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) {
            updateClassStudentCount(student.getIdClass());
            classInfo = lopHocRepository.findById(student.getIdClass());
        }

        return new StudentDetailDTO(student, classInfo, diemRepository.findByStudentId(student.getId()));
    }

    public Map<String, Object> calculateAcademicSummary(StudentDetailDTO studentDetail) {
        Map<String, Object> summary = new HashMap<>();
        List<DiemManager> scores = studentDetail.getScores();

        if (scores == null || scores.isEmpty()) {
            summary.put("hasScores", false);
            summary.put("gpa", "0.00");
            summary.put("status", "Ch∆∞a c√≥ ƒëi·ªÉm");
            summary.put("reminder", "Sinh vi√™n ch∆∞a c√≥ ƒëi·ªÉm h·ªçc t·∫≠p. H√£y th√™m ƒëi·ªÉm ƒë·ªÉ k√≠ch ho·∫°t Dashboard.");
            summary.put("totalSubjects", 0);
            return summary;
        }

        summary.put("hasScores", true);
        double totalScore = scores.stream().mapToDouble(DiemManager::getDiem).sum();
        double gpa = totalScore / scores.size();
        DiemManager minScoreSubject = scores.stream().min(Comparator.comparing(DiemManager::getDiem)).orElse(null);

        String status, reminder;
        if (gpa >= 9.0) {
            status = "Xu·∫•t s·∫Øc";
            reminder = "ü•á Ch√∫c m·ª´ng! Th√†nh t√≠ch Xu·∫•t s·∫Øc. H√£y gi·ªØ v·ªØng phong ƒë·ªô ƒë·ªânh cao n√†y!";
        } else if (gpa >= 8.0) {
            status = "Gi·ªèi";
            reminder = "üåü Th√†nh t√≠ch Gi·ªèi! C·ªë g·∫Øng c·∫£i thi·ªán m·ªôt ch√∫t ƒë·ªÉ ƒë·∫°t m·ª©c Xu·∫•t s·∫Øc.";
        } else if (gpa >= 7.0) {
            status = "Kh√°";
            reminder = "üëç K·∫øt qu·∫£ Kh√° t·ªët. H√£y t·∫≠p trung v√†o m√¥n " + (minScoreSubject != null ? minScoreSubject.getMonhoc() : "") + " ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm TB.";
        } else if (gpa >= 5.5) {
            status = "Trung b√¨nh";
            reminder = "üí° ƒê√£ ƒë·∫°t y√™u c·∫ßu. C·∫ßn n·ªó l·ª±c h∆°n ƒë·ªÉ kh√¥ng b·ªã t·ª•t l·∫°i.";
        } else if (gpa >= 4.0) {
            status = "Y·∫øu";
            reminder = "‚ö†Ô∏è C·∫£nh b√°o: H·ªçc l·ª±c Y·∫øu. C·∫ßn c√≥ k·∫ø ho·∫°ch h·ªçc t·∫≠p nghi√™m t√∫c ngay l·∫≠p t·ª©c.";
        } else {
            status = "K√©m";
            reminder = "üö® Nguy hi·ªÉm! H·ªçc l·ª±c K√©m. C·∫ßn s·ª± h·ªó tr·ª£ kh·∫©n c·∫•p ƒë·ªÉ tr√°nh b·ªã bu·ªôc th√¥i h·ªçc.";
        }

        summary.put("gpa", String.format("%.2f", gpa));
        summary.put("status", status);
        summary.put("reminder", reminder);
        if (minScoreSubject != null) {
            summary.put("minScore", String.format("%.2f", minScoreSubject.getDiem()));
            summary.put("subjectToImprove", minScoreSubject.getMonhoc());
        }
        summary.put("totalSubjects", scores.size());
        return summary;
    }

    public StudentManager getStudentById(Integer id) {
        return studentRepository.findById(id);
    }

    public void saveNewStudent(StudentManager student) {
        Integer idClass = student.getIdClass();
        String studentMajor = student.getChuyenNganh();

        if (idClass == null || idClass.equals(0)) {
            ClassManager classToAssign = lopHocRepository.findAllAssignableClasses().stream()
                    .filter(cls -> Objects.equals(cls.getKhoaHoc(), studentMajor))
                    .filter(cls -> studentRepository.countStudentsByClassId(cls.getIdClass()) < cls.getSoLuongSinhVien())
                    .findFirst()
                    .orElse(null);
            student.setIdClass(classToAssign != null ? classToAssign.getIdClass() : 0);
        } else {
            ClassManager chosenClass = lopHocRepository.findById(idClass);
            if (chosenClass == null) throw new IllegalStateException("L·ªói: L·ªõp h·ªçc v·ªõi ID " + idClass + " kh√¥ng t·ªìn t·∫°i.");
            if (!Objects.equals(chosenClass.getKhoaHoc(), studentMajor)) throw new IllegalStateException("L·ªói: Chuy√™n ng√†nh c·ªßa sinh vi√™n kh√¥ng kh·ªõp v·ªõi khoa c·ªßa l·ªõp.");
            if (studentRepository.countStudentsByClassId(idClass) >= chosenClass.getSoLuongSinhVien()) throw new IllegalStateException("L·ªói: L·ªõp " + chosenClass.getClassName() + " ƒë√£ ƒë·ªß ch·ªâ ti√™u.");
        }

        student.setId(studentRepository.getNextId());
        studentRepository.save(student);

        // C·∫≠p nh·∫≠t sƒ© s·ªë v√† G·ª¨I EMAIL n·∫øu x·∫øp l·ªõp th√†nh c√¥ng
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) {
            updateClassStudentCount(student.getIdClass());

            ClassManager assignedClass = lopHocRepository.findById(student.getIdClass());
            if (assignedClass != null) {
                emailService.sendWelcomeEmail(student, assignedClass);
            }
        }
    }

    public void updateStudent(StudentManager updatedStudent) {
        StudentManager originalStudent = studentRepository.findById(updatedStudent.getId());
        if (originalStudent == null) throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y sinh vi√™n ƒë·ªÉ c·∫≠p nh·∫≠t.");

        Integer oldClassId = originalStudent.getIdClass();
        Integer newClassId = updatedStudent.getIdClass();

        if (newClassId != null && !newClassId.equals(0)) {
            ClassManager newClass = lopHocRepository.findById(newClassId);
            if (newClass != null) {
                if (!Objects.equals(newClass.getKhoaHoc(), updatedStudent.getChuyenNganh())) {
                    throw new IllegalStateException("L·ªói: Chuy√™n ng√†nh c·ªßa sinh vi√™n kh√¥ng kh·ªõp v·ªõi khoa c·ªßa l·ªõp m·ªõi.");
                }
                if (!Objects.equals(oldClassId, newClassId) && studentRepository.countStudentsByClassId(newClassId) >= newClass.getSoLuongSinhVien()) {
                    throw new IllegalStateException("L·ªói: L·ªõp " + newClass.getClassName() + " ƒë√£ ƒë·ªß ch·ªâ ti√™u.");
                }
            }
        }

        studentRepository.update(updatedStudent);

        if (!Objects.equals(oldClassId, newClassId)) {
            if (oldClassId != null && !oldClassId.equals(0)) updateClassStudentCount(oldClassId);
            if (newClassId != null && !newClassId.equals(0)) updateClassStudentCount(newClassId);
        }

    }

    public void deleteStudent(Integer studentId) {
        StudentManager studentToDelete = studentRepository.findById(studentId);
        if (studentToDelete == null) return;
        Integer classId = studentToDelete.getIdClass();
        diemRepository.deleteByStudentId(studentId);
        studentRepository.deleteById(studentId);
        if (classId != null && !classId.equals(0)) {
            updateClassStudentCount(classId);
        }
    }

    public Map<String, Object> calculateOverallAcademicDistribution() {
        List<StudentDetailDTO> allStudents = getAllStudentDetails();
        Map<String, Integer> statusCounts = new HashMap<>();
        int totalStudentsWithScores = 0;

        for (StudentDetailDTO student : allStudents) {
            Map<String, Object> summary = calculateAcademicSummary(student);
            if ((boolean) summary.getOrDefault("hasScores", false)) {
                String status = (String) summary.get("status");
                statusCounts.merge(status, 1, Integer::sum);
                totalStudentsWithScores++;
            }
        }
        Map<String, Object> chartData = new HashMap<>();
        chartData.put("counts", statusCounts);
        chartData.put("totalStudentsChecked", totalStudentsWithScores);
        return chartData;
    }

    public Map<String, List<StudentManager>> getUnassignedStudentsGroupedByMajor() {
        return studentRepository.findAll().stream()
                .filter(student -> student.getIdClass() == null || student.getIdClass().equals(0))
                .collect(Collectors.groupingBy(student -> Objects.toString(student.getChuyenNganh(), "Chuy√™n ng√†nh ch∆∞a r√µ")));
    }

    public String autoAssignClassForUnassignedStudent(Integer studentId) {
        StudentManager student = studentRepository.findById(studentId);
        if (student == null) return "L·ªói: Kh√¥ng t√¨m th·∫•y sinh vi√™n.";
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) return "Sinh vi√™n ƒë√£ c√≥ l·ªõp.";

        ClassManager classToAssign = lopHocRepository.findAllAssignableClasses().stream()
                .filter(cls -> Objects.equals(cls.getKhoaHoc(), student.getChuyenNganh()))
                .filter(cls -> studentRepository.countStudentsByClassId(cls.getIdClass()) < cls.getSoLuongSinhVien())
                .findFirst()
                .orElse(null);

        if (classToAssign != null) {
            student.setIdClass(classToAssign.getIdClass());
            studentRepository.update(student);
            updateClassStudentCount(classToAssign.getIdClass());
            return "ƒê√£ x·∫øp " + student.getStudentName() + " v√†o l·ªõp " + classToAssign.getClassName() + " th√†nh c√¥ng!";
        } else {
            return "Kh√¥ng t√¨m th·∫•y l·ªõp c√≤n ch·ªâ ti√™u cho chuy√™n ng√†nh " + student.getChuyenNganh() + ".";
        }
    }

    public Map<String, Object> calculateMajorDistribution() {
        List<StudentManager> allStudents = studentRepository.findAll();
        Map<String, Long> majorCounts = allStudents.stream()
                .collect(Collectors.groupingBy(student -> Objects.toString(student.getChuyenNganh(), "Chuy√™n ng√†nh ch∆∞a r√µ"), Collectors.counting()));
        Map<String, Object> chartData = new HashMap<>();
        chartData.put("majorCounts", majorCounts);
        chartData.put("totalStudents", allStudents.size());
        return chartData;
    }
    public List<AcademicWarningDTO> getAcademicWarnings() {
        List<AcademicWarningDTO> warnings = new ArrayList<>();
        List<StudentDetailDTO> allStudents = getAllStudentDetails();

        // ƒê·∫∑t ng∆∞·ª°ng c·∫£nh b√°o, v√≠ d·ª• GPA < 5.5
        final double WARNING_THRESHOLD = 5.5;

        for (StudentDetailDTO student : allStudents) {
            Map<String, Object> summary = calculateAcademicSummary(student);
            boolean hasScores = (boolean) summary.getOrDefault("hasScores", false);

            if (hasScores) {
                // Parse gpa t·ª´ String v·ªÅ double ƒë·ªÉ so s√°nh
                double gpa = Double.parseDouble(((String) summary.get("gpa")).replace(',', '.'));

                if (gpa < WARNING_THRESHOLD) {
                    String status = (String) summary.get("status");
                    String subjectToImprove = (String) summary.getOrDefault("subjectToImprove", "N/A");

                    AcademicWarningDTO warningDTO = new AcademicWarningDTO(student, String.format("%.2f", gpa), status, subjectToImprove);
                    warnings.add(warningDTO);
                }
            }
        }

        // S·∫Øp x·∫øp danh s√°ch: sinh vi√™n c√≥ GPA th·∫•p nh·∫•t l√™n ƒë·∫ßu
        warnings.sort(Comparator.comparing(AcademicWarningDTO::getGpa));

        return warnings;
    }
}
