package com.example.ASM1_DUCDATH04243_SD20202.Service;

import com.example.ASM1_DUCDATH04243_SD20202.Model.ClassManager;
import com.example.ASM1_DUCDATH04243_SD20202.Model.DiemManager; // Import c·∫ßn thi·∫øt cho logic t√≠nh to√°n
import com.example.ASM1_DUCDATH04243_SD20202.Model.StudentDetailDTO;
import com.example.ASM1_DUCDATH04243_SD20202.Model.StudentManager;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.DiemRepository;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.LopHocRepository;
import com.example.ASM1_DUCDATH04243_SD20202.Respository.StudentRepository;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private LopHocRepository lopHocRepository;
    @Autowired
    private DiemRepository diemRepository;

    /**
     * Ph∆∞∆°ng th·ª©c n·ªôi b·ªô ƒë·ªÉ c·∫≠p nh·∫≠t sƒ© s·ªë l·ªõp (ƒê√£ c√≥ s·∫µn, c·∫ßn s·ª≠ d·ª•ng l·∫°i).
     */
    private void updateClassStudentCount(Integer classId) {
        ClassManager classManager = lopHocRepository.findById(classId);
        if (classManager != null) {
            long currentCount = studentRepository.countStudentsByClassId(classId);
            classManager.setSoLuongSinhVienHienTai((int) currentCount);
            lopHocRepository.update(classManager);
        }
    }

    /**
     * L·∫•y danh s√°ch chi ti·∫øt t·∫•t c·∫£ sinh vi√™n (k·∫øt h·ª£p th√¥ng tin l·ªõp v√† ƒëi·ªÉm).
     * ƒê√É C·∫¨P NH·∫¨T: ƒê·∫£m b·∫£o sƒ© s·ªë l·ªõp lu√¥n ch√≠nh x√°c.
     */
    public List<StudentDetailDTO> getAllStudentDetails() {
        // T·ªëi ∆∞u: L·∫•y danh s√°ch l·ªõp v√† c·∫≠p nh·∫≠t sƒ© s·ªë M·ªòT L·∫¶N cho m·ªói l·ªõp
        Map<Integer, ClassManager> updatedClasses = lopHocRepository.findAll().stream()
                .collect(Collectors.toMap(ClassManager::getIdClass, cls -> {
                    updateClassStudentCount(cls.getIdClass()); // C·∫≠p nh·∫≠t sƒ© s·ªë trong DB v√† trong object
                    return lopHocRepository.findById(cls.getIdClass()); // L·∫•y l·∫°i object ƒë√£ ƒë∆∞·ª£c update
                }));

        return studentRepository.findAll().stream()
                .map(student -> {
                    ClassManager classInfo = updatedClasses.get(student.getIdClass());
                    List<DiemManager> scores = diemRepository.findByStudentId(student.getId());
                    return new StudentDetailDTO(student, classInfo, scores);
                }).collect(Collectors.toList());
    }

    /**
     * L·∫•y chi ti·∫øt m·ªôt sinh vi√™n theo ID.
     * ƒê√É C·∫¨P NH·∫¨T: ƒê·∫£m b·∫£o sƒ© s·ªë l·ªõp lu√¥n ch√≠nh x√°c.
     */
    public StudentDetailDTO getStudentDetailsById(Integer id) {
        StudentManager student = studentRepository.findById(id);
        if (student == null) {
            return null;
        }

        ClassManager classInfo = null;
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) {
            // B∆∞·ªõc quan tr·ªçng: C·∫≠p nh·∫≠t sƒ© s·ªë c·ªßa l·ªõp n√†y tr∆∞·ªõc khi hi·ªÉn th·ªã
            updateClassStudentCount(student.getIdClass());
            classInfo = lopHocRepository.findById(student.getIdClass());
        }

        return new StudentDetailDTO(
                student,
                classInfo,
                diemRepository.findByStudentId(student.getId())
        );
    }

    // -------------------------------------------------------------------------------------------------------------
    // START: LOGIC CHO DASHBOARD H·ªåC L·ª∞C C√Å NH√ÇN H√ìA (ƒê√É C·∫¨P NH·∫¨T THANG ƒêI·ªÇM)
    // -------------------------------------------------------------------------------------------------------------

    /**
     * T√≠nh to√°n ƒêi·ªÉm Trung b√¨nh (GPA), Tr·∫°ng th√°i, v√† L·ªùi nh·∫Øc c√° nh√¢n h√≥a cho sinh vi√™n.
     */
    public Map<String, Object> calculateAcademicSummary(StudentDetailDTO studentDetail) {
        Map<String, Object> summary = new HashMap<>();
        List<DiemManager> scores = studentDetail.getScores();

        if (scores == null || scores.isEmpty()) {
            // Tr∆∞·ªùng h·ª£p KH√îNG C√ì ƒêI·ªÇM
            summary.put("hasScores", false);
            summary.put("gpa", "0.00");
            summary.put("status", "Ch∆∞a c√≥ ƒëi·ªÉm");
            summary.put("reminder", "Sinh vi√™n ch∆∞a c√≥ ƒëi·ªÉm h·ªçc t·∫≠p. H√£y th√™m ƒëi·ªÉm ƒë·ªÉ k√≠ch ho·∫°t Dashboard.");
            summary.put("totalSubjects", 0);
            return summary;
        }

        // Tr∆∞·ªùng h·ª£p C√ì ƒêI·ªÇM
        summary.put("hasScores", true);

        double totalScore = 0;
        double minScore = Double.MAX_VALUE;
        String subjectToImprove = "c√°c m√¥n h·ªçc"; // T√™n m√¥n c√≥ ƒëi·ªÉm th·∫•p nh·∫•t (ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh)

        for (DiemManager diem : scores) {
            double score = diem.getDiem();
            totalScore += score;

            if (score < minScore) {
                minScore = score;
                // Gi·∫£ ƒë·ªãnh DiemManager c√≥ ph∆∞∆°ng th·ª©c getMonhoc() ƒë·ªÉ l·∫•y t√™n m√¥n h·ªçc
                subjectToImprove = diem.getMonhoc();
            }
        }

        double gpa = totalScore / scores.size();
        String status;
        String reminder;

        // C·∫¨P NH·∫¨T PH√ÇN LO·∫†I H·ªåC L·ª∞C (Xu·∫•t s·∫Øc, Gi·ªèi, Kh√°, Trung b√¨nh, Y·∫øu, K√©m)
        if (gpa >= 9.0) {
            status = "Xu·∫•t s·∫Øc";
            reminder = "ü•á Ch√∫c m·ª´ng! Th√†nh t√≠ch Xu·∫•t s·∫Øc. H√£y gi·ªØ v·ªØng phong ƒë·ªô ƒë·ªânh cao n√†y!";
        } else if (gpa >= 8.0) {
            status = "Gi·ªèi";
            reminder = "üåü Th√†nh t√≠ch Gi·ªèi! C·ªë g·∫Øng c·∫£i thi·ªán m·ªôt ch√∫t ƒë·ªÉ ƒë·∫°t m·ª©c Xu·∫•t s·∫Øc.";
        } else if (gpa >= 7.0) {
            status = "Kh√°";
            reminder = "üëç K·∫øt qu·∫£ Kh√° t·ªët. H√£y t·∫≠p trung v√†o m√¥n " + subjectToImprove + " ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm TB.";
        } else if (gpa >= 5.5) {
            status = "Trung b√¨nh";
            reminder = "üí° ƒê√£ ƒë·∫°t y√™u c·∫ßu. C·∫ßn n·ªó l·ª±c h∆°n ƒë·ªÉ kh√¥ng b·ªã t·ª•t l·∫°i, ƒë·∫∑c bi·ªát l√† c√°c m√¥n c√≥ ƒëi·ªÉm th·∫•p.";
        } else if (gpa >= 4.0) {
            status = "Y·∫øu";
            reminder = "‚ö†Ô∏è C·∫£nh b√°o: H·ªçc l·ª±c Y·∫øu. C·∫ßn c√≥ k·∫ø ho·∫°ch h·ªçc t·∫≠p nghi√™m t√∫c ngay l·∫≠p t·ª©c.";
        } else {
            status = "K√©m";
            reminder = "üö® Nguy hi·ªÉm! H·ªçc l·ª±c K√©m. B·∫°n c·∫ßn s·ª± can thi·ªáp v√† h·ªó tr·ª£ kh·∫©n c·∫•p ƒë·ªÉ tr√°nh b·ªã bu·ªôc th√¥i h·ªçc.";
        }

        summary.put("gpa", String.format("%.2f", gpa)); // ƒê·ªãnh d·∫°ng 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        summary.put("status", status);
        summary.put("reminder", reminder);
        summary.put("minScore", String.format("%.2f", minScore));
        summary.put("subjectToImprove", subjectToImprove);
        summary.put("totalSubjects", scores.size());

        return summary;
    }

    // -------------------------------------------------------------------------------------------------------------
    // END: LOGIC CHO DASHBOARD H·ªåC L·ª∞C C√Å NH√ÇN H√ìA
    // -------------------------------------------------------------------------------------------------------------

    /**
     * L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa sinh vi√™n theo ID (d√πng cho form edit).
     */
    public StudentManager getStudentById(Integer id) {
        return studentRepository.findById(id);
    }

    /**
     * L∆∞u sinh vi√™n m·ªõi (C√≥ ki·ªÉm tra chuy√™n ng√†nh v√† ch·ªâ ti√™u).
     */
    public void saveNewStudent(StudentManager student) {
        Integer idClass = student.getIdClass();
        String studentMajor = student.getChuyenNganh(); // L·∫•y chuy√™n ng√†nh c·ªßa sinh vi√™n
        ClassManager classToAssign = null; // Kh·ªüi t·∫°o null

        // --- 1. X·ª¨ L√ù CH·ªåN L·ªöP (T·ª∞ ƒê·ªòNG HO·∫∂C TH·ª¶ C√îNG) ---
        if (idClass == null || idClass.equals(0)) { // Ph√¢n l·ªõp t·ª± ƒë·ªông

            // L·ªåC THEO CHUY√äN NG√ÄNH V√Ä CH·ªà TI√äU TR·ªêNG
            classToAssign = lopHocRepository.findAllAssignableClasses().stream()
                    // B∆Ø·ªöC L·ªåC: Ch·ªâ xem x√©t c√°c l·ªõp c√≥ KH√ìA H·ªåC TR√ôNG V·ªöI CHUY√äN NG√ÄNH SINH VI√äN
                    .filter(cls -> cls.getKhoaHoc() != null && cls.getKhoaHoc().equals(studentMajor))
                    .filter(cls -> {
                        long currentCount = studentRepository.countStudentsByClassId(cls.getIdClass());
                        Integer maxCapacity = cls.getSoLuongSinhVien();
                        return maxCapacity != null && currentCount < maxCapacity;
                    })
                    .findFirst()
                    // C·∫¨P NH·∫¨T LOGIC M·ªöI: N·∫øu kh√¥ng t√¨m th·∫•y l·ªõp, KH√îNG n√©m l·ªói, m√† ƒë·ªÉ classToAssign l√† null
                    .orElse(null);

            if (classToAssign != null) {
                student.setIdClass(classToAssign.getIdClass());
            } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y l·ªõp ph√π h·ª£p, gi·ªØ nguy√™n idClass = 0 (ch∆∞a x·∫øp l·ªõp)
                student.setIdClass(0);
            }

        } else { // Ph√¢n l·ªõp th·ªß c√¥ng (Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn l·ªõp)
            classToAssign = lopHocRepository.findById(idClass);

            if (classToAssign == null) {
                throw new IllegalStateException("L·ªói: L·ªõp h·ªçc v·ªõi ID " + idClass + " kh√¥ng t·ªìn t·∫°i.");
            }

            // KI·ªÇM TRA: ƒê·∫£m b·∫£o chuy√™n ng√†nh sinh vi√™n kh·ªõp v·ªõi khoa c·ªßa l·ªõp
            if (classToAssign.getKhoaHoc() == null || !classToAssign.getKhoaHoc().equals(studentMajor)) {
                throw new IllegalStateException("L·ªói: L·ªõp " + classToAssign.getClassName() + " thu·ªôc Khoa " + classToAssign.getKhoaHoc() + ", kh√¥ng kh·ªõp v·ªõi chuy√™n ng√†nh " + studentMajor + " c·ªßa sinh vi√™n.");
            }

            // Ki·ªÉm tra ch·ªâ ti√™u
            long currentCount = studentRepository.countStudentsByClassId(idClass);
            Integer maxCapacity = classToAssign.getSoLuongSinhVien();
            if (maxCapacity != null && currentCount >= maxCapacity) {
                throw new IllegalStateException("L·ªói: L·ªõp " + classToAssign.getClassName() + " ƒë√£ ƒë·ªß ch·ªâ ti√™u.");
            }
        }

        // --- 2. L∆ØU SINH VI√äN ---
        student.setId(studentRepository.getNextId());
        studentRepository.save(student);

        // --- 3. C·∫¨P NH·∫¨T Sƒ® S·ªê L·ªöP ---
        // Ch·ªâ c·∫≠p nh·∫≠t sƒ© s·ªë n·∫øu sinh vi√™n ƒë∆∞·ª£c x·∫øp v√†o l·ªõp (idClass != 0)
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) {
            updateClassStudentCount(student.getIdClass());
        }
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n (C√≥ ki·ªÉm tra chuy√™n ng√†nh v√† ch·ªâ ti√™u khi ƒë·ªïi l·ªõp).
     */
    public void updateStudent(StudentManager updatedStudent) {
        StudentManager originalStudent = studentRepository.findById(updatedStudent.getId());
        if (originalStudent == null) {
            throw new IllegalStateException("Kh√¥ng t√¨m th·∫•y sinh vi√™n ƒë·ªÉ c·∫≠p nh·∫≠t.");
        }

        // L·∫•y chuy√™n ng√†nh sinh vi√™n ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa l·ªõp m·ªõi
        String studentMajor = updatedStudent.getChuyenNganh();
        Integer oldClassId = originalStudent.getIdClass();
        Integer newClassId = updatedStudent.getIdClass();

        // Ki·ªÉm tra n·∫øu c√≥ l·ªõp m·ªõi ƒë∆∞·ª£c ch·ªçn (newClassId != 0 v√† kh√°c null)
        if (newClassId != null && !newClassId.equals(0)) {
            ClassManager newClass = lopHocRepository.findById(newClassId);
            if (newClass != null) {
                // KI·ªÇM TRA: ƒê·∫£m b·∫£o chuy√™n ng√†nh sinh vi√™n kh·ªõp v·ªõi khoa c·ªßa l·ªõp
                if (newClass.getKhoaHoc() == null || !newClass.getKhoaHoc().equals(studentMajor)) {
                    throw new IllegalStateException("L·ªói: L·ªõp " + newClass.getClassName() + " thu·ªôc Khoa " + newClass.getKhoaHoc() + ", kh√¥ng kh·ªõp v·ªõi chuy√™n ng√†nh " + studentMajor + " c·ªßa sinh vi√™n.");
                }

                // Ki·ªÉm tra ch·ªâ ti√™u (Ch·ªâ ki·ªÉm tra n·∫øu l·ªõp m·ªõi kh√°c l·ªõp c≈©)
                if (!Objects.equals(oldClassId, newClassId)) {
                    long currentCount = studentRepository.countStudentsByClassId(newClassId);
                    Integer maxCapacity = newClass.getSoLuongSinhVien();
                    if (maxCapacity != null && currentCount >= maxCapacity) {
                        throw new IllegalStateException("L·ªói: L·ªõp " + newClass.getClassName() + " ƒë√£ ƒë·ªß ch·ªâ ti√™u.");
                    }
                }
            }
        }

        // Th·ª±c hi·ªán c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n
        studentRepository.update(updatedStudent);

        // N·∫øu sinh vi√™n c√≥ s·ª± thay ƒë·ªïi v·ªÅ l·ªõp h·ªçc, c·∫≠p nh·∫≠t sƒ© s·ªë cho c·∫£ l·ªõp c≈© v√† l·ªõp m·ªõi
        if (!Objects.equals(oldClassId, newClassId)) {
            // C·∫≠p nh·∫≠t l·ªõp c≈© (n·∫øu n√≥ kh√¥ng ph·∫£i l√† null/0)
            if (oldClassId != null && !oldClassId.equals(0)) {
                updateClassStudentCount(oldClassId);
            }
            // C·∫≠p nh·∫≠t l·ªõp m·ªõi (n·∫øu n√≥ kh√¥ng ph·∫£i l√† null/0)
            if (newClassId != null && !newClassId.equals(0)) {
                updateClassStudentCount(newClassId);
            }
        }
    }

    public void deleteStudent(Integer studentId) {
        // T√¨m sinh vi√™n ƒë·ªÉ bi·∫øt h·ªç thu·ªôc l·ªõp n√†o tr∆∞·ªõc khi x√≥a
        StudentManager studentToDelete = studentRepository.findById(studentId);
        if (studentToDelete == null) {
            // N·∫øu kh√¥ng t√¨m th·∫•y sinh vi√™n th√¨ kh√¥ng c·∫ßn l√†m g√¨ th√™m
            return;
        }

        Integer classId = studentToDelete.getIdClass();

        // Th·ª±c hi·ªán x√≥a ƒëi·ªÉm v√† th√¥ng tin sinh vi√™n
        diemRepository.deleteByStudentId(studentId);
        studentRepository.deleteById(studentId);

        // N·∫øu sinh vi√™n n√†y ƒë√£ ƒë∆∞·ª£c x·∫øp l·ªõp, c·∫≠p nh·∫≠t l·∫°i sƒ© s·ªë c·ªßa l·ªõp ƒë√≥
        if (classId != null && !classId.equals(0)) {
            updateClassStudentCount(classId);
        }
    }

    public Map<String, Object> calculateOverallAcademicDistribution() {
        // 1. L·∫•y chi ti·∫øt ƒëi·ªÉm c·ªßa T·∫§T C·∫¢ sinh vi√™n
        List<StudentDetailDTO> allStudents = getAllStudentDetails();
        int totalStudentsWithScores = 0;

        // Kh·ªüi t·∫°o Map ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng sinh vi√™n ·ªü m·ªói lo·∫°i
        Map<String, Integer> statusCounts = new HashMap<>();
        statusCounts.put("Xu·∫•t s·∫Øc", 0);
        statusCounts.put("Gi·ªèi", 0);
        statusCounts.put("Kh√°", 0);
        statusCounts.put("Trung b√¨nh", 0);
        statusCounts.put("Y·∫øu", 0);
        statusCounts.put("K√©m", 0);

        for (StudentDetailDTO student : allStudents) {
            // S·ª≠ d·ª•ng l·∫°i logic ph√¢n lo·∫°i h·ªçc l·ª±c ƒë·ªÉ l·∫•y tr·∫°ng th√°i (status)
            Map<String, Object> summary = calculateAcademicSummary(student);
            boolean hasScores = (boolean) summary.getOrDefault("hasScores", false);

            if (hasScores) {
                String status = (String) summary.get("status");
                statusCounts.put(status, statusCounts.get(status) + 1);
                totalStudentsWithScores++;
            }
        }

        Map<String, Object> chartData = new HashMap<>();
        chartData.put("totalStudentsChecked", totalStudentsWithScores);

        // 2. Chuy·ªÉn ƒë·ªïi s·ªë l∆∞·ª£ng th√†nh t·ª∑ l·ªá ph·∫ßn trƒÉm (ho·∫∑c ch·ªâ c·∫ßn s·ªë l∆∞·ª£ng)
        Map<String, Double> percentageData = new HashMap<>();

        if (totalStudentsWithScores > 0) {
            for (Map.Entry<String, Integer> entry : statusCounts.entrySet()) {
                double percentage = (entry.getValue() * 100.0) / totalStudentsWithScores;
                // L∆∞u d∆∞·ªõi d·∫°ng chu·ªói c√≥ 2 ch·ªØ s·ªë th·∫≠p ph√¢n
                percentageData.put(entry.getKey(), Double.parseDouble(String.format("%.2f", percentage)));
            }
        }

        chartData.put("counts", statusCounts); // S·ªë l∆∞·ª£ng (t·ªët h∆°n cho Chart.js)
        chartData.put("percentages", percentageData); // T·ª∑ l·ªá (n·∫øu c·∫ßn)

        return chartData;
    }
    public Map<String, List<StudentManager>> getUnassignedStudentsGroupedByMajor() {
        return studentRepository.findAll().stream()
                .filter(student -> student.getIdClass() == null || student.getIdClass().equals(0))
                .collect(Collectors.groupingBy(
                        // Nh√≥m theo chuy√™n ng√†nh. S·ª≠ d·ª•ng "Ch∆∞a r√µ" n·∫øu chuyenNganh l√† null/empty
                        student -> student.getChuyenNganh() != null && !student.getChuyenNganh().isEmpty()
                                ? student.getChuyenNganh()
                                : "Chuy√™n ng√†nh ch∆∞a r√µ"
                ));
    }
    public String autoAssignClassForUnassignedStudent(Integer studentId) {
        StudentManager student = studentRepository.findById(studentId);

        if (student == null) {
            return "L·ªói: Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ ID " + studentId + ".";
        }

        // Ki·ªÉm tra sinh vi√™n ƒë√£ c√≥ l·ªõp ch∆∞a (ch·ªâ x·ª≠ l√Ω khi idClass l√† null/0)
        if (student.getIdClass() != null && !student.getIdClass().equals(0)) {
            return "Sinh vi√™n " + student.getStudentName() + " ƒë√£ c√≥ l·ªõp.";
        }

        String studentMajor = student.getChuyenNganh();

        // 1. T√¨m l·ªõp tr·ªëng ph√π h·ª£p
        ClassManager classToAssign = lopHocRepository.findAllAssignableClasses().stream()
                .filter(cls -> cls.getKhoaHoc() != null && cls.getKhoaHoc().equals(studentMajor))
                .filter(cls -> {
                    long currentCount = studentRepository.countStudentsByClassId(cls.getIdClass());
                    Integer maxCapacity = cls.getSoLuongSinhVien();
                    return maxCapacity != null && currentCount < maxCapacity;
                })
                .findFirst()
                .orElse(null);

        // 2. Th·ª±c hi·ªán x·∫øp l·ªõp ho·∫∑c b√°o c√°o
        if (classToAssign != null) {
            Integer oldClassId = student.getIdClass();
            student.setIdClass(classToAssign.getIdClass());
            studentRepository.update(student); // D√πng update ƒë·ªÉ l∆∞u thay ƒë·ªïi

            // C·∫≠p nh·∫≠t sƒ© s·ªë l·ªõp m·ªõi
            updateClassStudentCount(classToAssign.getIdClass());

            // C·∫≠p nh·∫≠t sƒ© s·ªë l·ªõp c≈© (n·∫øu idClass tr∆∞·ªõc ƒë√≥ kh√¥ng ph·∫£i 0/null)
            if (oldClassId != null && !oldClassId.equals(0)) {
                updateClassStudentCount(oldClassId);
            }

            return "ƒê√£ x·∫øp " + student.getStudentName() + " v√†o l·ªõp " + classToAssign.getClassName() + " th√†nh c√¥ng!";
        } else {
            return "Kh√¥ng t√¨m th·∫•y l·ªõp c√≤n ch·ªâ ti√™u cho chuy√™n ng√†nh " + studentMajor + ".";
        }
    }
    // Th√™m ph∆∞∆°ng th·ª©c n√†y v√†o StudentService.java
    /**
     * T√≠nh to√°n ph√¢n ph·ªëi s·ªë l∆∞·ª£ng sinh vi√™n theo chuy√™n ng√†nh.
     */
    public Map<String, Object> calculateMajorDistribution() {
        List<StudentManager> allStudents = studentRepository.findAll();

        // Nh√≥m v√† ƒë·∫øm s·ªë l∆∞·ª£ng sinh vi√™n theo chuy√™n ng√†nh
        Map<String, Long> majorCounts = allStudents.stream()
                .collect(Collectors.groupingBy(
                        // S·ª≠ d·ª•ng t√™n chuy√™n ng√†nh ho·∫∑c "Ch∆∞a r√µ" n·∫øu null
                        student -> student.getChuyenNganh() != null && !student.getChuyenNganh().isEmpty()
                                ? student.getChuyenNganh()
                                : "Chuy√™n ng√†nh ch∆∞a r√µ",
                        Collectors.counting()
                ));

        Map<String, Object> chartData = new HashMap<>();
        chartData.put("majorCounts", majorCounts);
        chartData.put("totalStudents", allStudents.size());

        return chartData;
    }
    public void importStudentsFromExcel(MultipartFile file) throws IOException {
        try (InputStream inputStream = file.getInputStream();
             Workbook workbook = new XSSFWorkbook(inputStream)) {

            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rows = sheet.iterator();

            // B·ªè qua d√≤ng header
            if (rows.hasNext()) {
                rows.next();
            }

            // L·∫∑p qua c√°c d√≤ng d·ªØ li·ªáu
            while (rows.hasNext()) {
                Row currentRow = rows.next();

                String studentName = getCellValueAsString(currentRow.getCell(0));
                String email = getCellValueAsString(currentRow.getCell(1));
                String sdt = getCellValueAsString(currentRow.getCell(2));
                String chuyenNganh = getCellValueAsString(currentRow.getCell(3));

                // B·ªè qua c√°c d√≤ng tr·ªëng ho√†n to√†n
                if (studentName.isEmpty() && email.isEmpty() && sdt.isEmpty() && chuyenNganh.isEmpty()) {
                    continue;
                }

                StudentManager newStudent = new StudentManager();
                newStudent.setStudentName(studentName);
                newStudent.setEmail(email);
                newStudent.setSdt(sdt);
                newStudent.setChuyenNganh(chuyenNganh);

                // L∆∞u sinh vi√™n, ID s·∫Ω ƒë∆∞·ª£c repository t·ª± ƒë·ªông g√°n
                studentRepository.save(newStudent);
            }
        }
    }

    /**
     * H√†m ph·ª• tr·ª£ ƒë·ªÉ ƒë·ªçc gi√° tr·ªã c·ªßa √¥ m·ªôt c√°ch an to√†n.
     */
    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                return String.format("%.0f", cell.getNumericCellValue());
            default:
                return "";
        }
    }
}